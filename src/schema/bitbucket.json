{
    "name": "bitbucket",
    "description": {
      "en": "Bitbucket agent for interacting with Bitbucket repositories, projects, pull requests, and other version control operations",
      "ko": "Bitbucket 저장소, 프로젝트, 풀 리퀘스트 및 기타 버전 관리 작업과 상호 작용하기 위한 Bitbucket 에이전트"
    },
    "parameters": {
      "command": {
        "type": "string",
        "description": {
          "en": "Bitbucket command to execute",
          "ko": "실행할 Bitbucket 명령어"
        },
        "required": true
      },
      "project_key": {
        "type": "string",
        "description": {
          "en": "Bitbucket project key",
          "ko": "Bitbucket 프로젝트 키"
        },
        "required": false
      },
      "repo_slug": {
        "type": "string",
        "description": {
          "en": "Bitbucket repository slug",
          "ko": "Bitbucket 저장소 슬러그"
        },
        "required": false
      },
      "user_query": {
        "type": "string",
        "description": {
          "en": "Natural language query about Bitbucket repositories",
          "ko": "Bitbucket 저장소에 관한 자연어 질의"
        },
        "required": false
      }
    },
    "authentication": {
      "type": "Bitbucket credentials",
      "methods": [
        {
          "name": "Basic Authentication",
          "description": {
            "en": "Authentication using username and password/token",
            "ko": "사용자 이름 및 비밀번호/토큰을 사용한 인증"
          },
          "parameters": ["username", "password"]
        },
        {
          "name": "OAuth",
          "description": {
            "en": "Authentication using OAuth token",
            "ko": "OAuth 토큰을 사용한 인증"
          },
          "parameters": ["oauth_token"]
        },
        {
          "name": "Access Token",
          "description": {
            "en": "Authentication using Bitbucket access token",
            "ko": "Bitbucket 액세스 토큰을 사용한 인증"
          },
          "parameters": ["access_token"]
        }
      ]
    },
    "reasoning_strategy": {
      "approach": "단계적 추론 방식",
      "steps": [
        "1. 사용자 질의 의도 파악 (저장소 목록 조회, PR 작성, 코드 검토 등)",
        "2. 필요한 파라미터 식별 (프로젝트 키, 저장소 슬러그, 브랜치 등)",
        "3. 적절한 Bitbucket API 엔드포인트 결정",
        "4. 필요한 권한 확인",
        "5. 작업 수행 및 결과 반환"
      ],
      "validation_checks": [
        "프로젝트 키 유효성 검증",
        "저장소 슬러그 유효성 검증",
        "사용자 권한 검증",
        "필수 파라미터 존재 여부 확인",
        "API 제한 확인"
      ]
    },
    "service_capabilities": {
      "project_operations": [
        {
          "operation": "get_projects",
          "description": {
            "en": "Retrieves all projects visible to the authenticated user",
            "ko": "인증된 사용자가 볼 수 있는 모든 프로젝트 검색"
          },
          "required_params": [],
          "optional_params": ["name", "permission", "limit", "start"],
          "endpoint": "/rest/api/1.0/projects",
          "example": "get_projects(limit=100)"
        },
        {
          "operation": "get_project",
          "description": {
            "en": "Retrieves the project matching the supplied project key",
            "ko": "제공된 프로젝트 키와 일치하는 프로젝트 검색"
          },
          "required_params": ["project_key"],
          "optional_params": [],
          "endpoint": "/rest/api/1.0/projects/{project_key}",
          "example": "get_project(project_key='TEST')"
        },
        {
          "operation": "create_project",
          "description": {
            "en": "Creates a new project with the given key and name",
            "ko": "주어진 키와 이름으로 새 프로젝트 생성"
          },
          "required_params": ["key", "name"],
          "optional_params": ["description", "avatar"],
          "endpoint": "/rest/api/1.0/projects",
          "example": "create_project(key='TEST', name='Test Project', description='This is a test project')"
        },
        {
          "operation": "update_project",
          "description": {
            "en": "Updates the project matching the supplied project key",
            "ko": "제공된 프로젝트 키와 일치하는 프로젝트 업데이트"
          },
          "required_params": ["project_key", "name"],
          "optional_params": ["description", "avatar"],
          "endpoint": "/rest/api/1.0/projects/{project_key}",
          "example": "update_project(project_key='TEST', name='Updated Test Project', description='This is an updated test project')"
        },
        {
          "operation": "delete_project",
          "description": {
            "en": "Deletes the project matching the supplied project key",
            "ko": "제공된 프로젝트 키와 일치하는 프로젝트 삭제"
          },
          "required_params": ["project_key"],
          "optional_params": [],
          "endpoint": "/rest/api/1.0/projects/{project_key}",
          "example": "delete_project(project_key='TEST')"
        }
      ],
      "repository_operations": [
        {
          "operation": "get_repositories",
          "description": {
            "en": "Retrieves repositories from the specified project",
            "ko": "지정된 프로젝트에서 저장소 검색"
          },
          "required_params": ["project_key"],
          "optional_params": ["limit", "start"],
          "endpoint": "/rest/api/1.0/projects/{project_key}/repos",
          "example": "get_repositories(project_key='TEST', limit=100)"
        },
        {
          "operation": "get_repository",
          "description": {
            "en": "Retrieves a repository with the given project key and repository slug",
            "ko": "주어진 프로젝트 키와 저장소 슬러그를 가진 저장소 검색"
          },
          "required_params": ["project_key", "repo_slug"],
          "optional_params": [],
          "endpoint": "/rest/api/1.0/projects/{project_key}/repos/{repo_slug}",
          "example": "get_repository(project_key='TEST', repo_slug='my-repo')"
        },
        {
          "operation": "create_repository",
          "description": {
            "en": "Creates a new repository in the specified project",
            "ko": "지정된 프로젝트에 새 저장소 생성"
          },
          "required_params": ["project_key", "name"],
          "optional_params": ["scmId", "forkable", "public"],
          "endpoint": "/rest/api/1.0/projects/{project_key}/repos",
          "example": "create_repository(project_key='TEST', name='My Repository', scmId='git', forkable=True)"
        },
        {
          "operation": "update_repository",
          "description": {
            "en": "Updates a repository with the given project key and repository slug",
            "ko": "주어진 프로젝트 키와 저장소 슬러그를 가진 저장소 업데이트"
          },
          "required_params": ["project_key", "repo_slug", "name"],
          "optional_params": ["description", "forkable", "public"],
          "endpoint": "/rest/api/1.0/projects/{project_key}/repos/{repo_slug}",
          "example": "update_repository(project_key='TEST', repo_slug='my-repo', name='Updated Repository', description='This is an updated repository')"
        },
        {
          "operation": "delete_repository",
          "description": {
            "en": "Deletes a repository with the given project key and repository slug",
            "ko": "주어진 프로젝트 키와 저장소 슬러그를 가진 저장소 삭제"
          },
          "required_params": ["project_key", "repo_slug"],
          "optional_params": [],
          "endpoint": "/rest/api/1.0/projects/{project_key}/repos/{repo_slug}",
          "example": "delete_repository(project_key='TEST', repo_slug='my-repo')"
        },
        {
          "operation": "fork_repository",
          "description": {
            "en": "Forks a repository into a different project or the same project",
            "ko": "저장소를 다른 프로젝트 또는 동일한 프로젝트로 포크"
          },
          "required_params": ["project_key", "repo_slug", "name"],
          "optional_params": ["target_project_key"],
          "endpoint": "/rest/api/1.0/projects/{project_key}/repos/{repo_slug}",
          "example": "fork_repository(project_key='TEST', repo_slug='my-repo', name='My Fork', target_project_key='FORK')"
        }
      ],
      "branch_operations": [
        {
          "operation": "get_branches",
          "description": {
            "en": "Retrieves branches from the specified repository",
            "ko": "지정된 저장소에서 브랜치 검색"
          },
          "required_params": ["project_key", "repo_slug"],
          "optional_params": ["limit", "start", "details", "filterText", "orderBy"],
          "endpoint": "/rest/api/1.0/projects/{project_key}/repos/{repo_slug}/branches",
          "example": "get_branches(project_key='TEST', repo_slug='my-repo', limit=100, filterText='feature/')"
        },
        {
          "operation": "get_default_branch",
          "description": {
            "en": "Retrieves the default branch of the specified repository",
            "ko": "지정된 저장소의 기본 브랜치 검색"
          },
          "required_params": ["project_key", "repo_slug"],
          "optional_params": [],
          "endpoint": "/rest/api/1.0/projects/{project_key}/repos/{repo_slug}/branches/default",
          "example": "get_default_branch(project_key='TEST', repo_slug='my-repo')"
        },
        {
          "operation": "create_branch",
          "description": {
            "en": "Creates a new branch in the specified repository",
            "ko": "지정된 저장소에 새 브랜치 생성"
          },
          "required_params": ["project_key", "repo_slug", "name", "startPoint"],
          "optional_params": ["message"],
          "endpoint": "/rest/api/1.0/projects/{project_key}/repos/{repo_slug}/branches",
          "example": "create_branch(project_key='TEST', repo_slug='my-repo', name='feature/my-feature', startPoint='master')"
        },
        {
          "operation": "delete_branch",
          "description": {
            "en": "Deletes a branch from the specified repository",
            "ko": "지정된 저장소에서 브랜치 삭제"
          },
          "required_params": ["project_key", "repo_slug", "name"],
          "optional_params": [],
          "endpoint": "/rest/api/1.0/projects/{project_key}/repos/{repo_slug}/branches",
          "example": "delete_branch(project_key='TEST', repo_slug='my-repo', name='feature/my-feature')"
        }
      ],
      "pull_request_operations": [
        {
          "operation": "get_pull_requests",
          "description": {
            "en": "Retrieves pull requests from the specified repository",
            "ko": "지정된 저장소에서 풀 리퀘스트 검색"
          },
          "required_params": ["project_key", "repo_slug"],
          "optional_params": ["state", "order", "limit", "start", "direction", "at"],
          "endpoint": "/rest/api/1.0/projects/{project_key}/repos/{repo_slug}/pull-requests",
          "example": "get_pull_requests(project_key='TEST', repo_slug='my-repo', state='OPEN', limit=100)"
        },
        {
          "operation": "get_pull_request",
          "description": {
            "en": "Retrieves a pull request with the given ID from the specified repository",
            "ko": "지정된 저장소에서 주어진 ID를 가진 풀 리퀘스트 검색"
          },
          "required_params": ["project_key", "repo_slug", "pull_request_id"],
          "optional_params": [],
          "endpoint": "/rest/api/1.0/projects/{project_key}/repos/{repo_slug}/pull-requests/{pull_request_id}",
          "example": "get_pull_request(project_key='TEST', repo_slug='my-repo', pull_request_id=1)"
        },
        {
          "operation": "create_pull_request",
          "description": {
            "en": "Creates a new pull request in the specified repository",
            "ko": "지정된 저장소에 새 풀 리퀘스트 생성"
          },
          "required_params": ["project_key", "repo_slug", "title", "fromRef", "toRef"],
          "optional_params": ["description", "reviewers"],
          "endpoint": "/rest/api/1.0/projects/{project_key}/repos/{repo_slug}/pull-requests",
          "example": "create_pull_request(project_key='TEST', repo_slug='my-repo', title='My PR', fromRef='refs/heads/feature/my-feature', toRef='refs/heads/master', description='Please review my changes')"
        },
        {
          "operation": "update_pull_request",
          "description": {
            "en": "Updates a pull request with the given ID in the specified repository",
            "ko": "지정된 저장소에서 주어진 ID를 가진 풀 리퀘스트 업데이트"
          },
          "required_params": ["project_key", "repo_slug", "pull_request_id"],
          "optional_params": ["title", "description", "version"],
          "endpoint": "/rest/api/1.0/projects/{project_key}/repos/{repo_slug}/pull-requests/{pull_request_id}",
          "example": "update_pull_request(project_key='TEST', repo_slug='my-repo', pull_request_id=1, title='Updated PR', description='Updated description', version=1)"
        },
        {
          "operation": "get_pull_request_changes",
          "description": {
            "en": "Retrieves changes for a pull request",
            "ko": "풀 리퀘스트의 변경 사항 검색"
          },
          "required_params": ["project_key", "repo_slug", "pull_request_id"],
          "optional_params": ["limit", "start"],
          "endpoint": "/rest/api/1.0/projects/{project_key}/repos/{repo_slug}/pull-requests/{pull_request_id}/changes",
          "example": "get_pull_request_changes(project_key='TEST', repo_slug='my-repo', pull_request_id=1, limit=100)"
        },
        {
          "operation": "get_pull_request_comments",
          "description": {
            "en": "Retrieves comments for a pull request",
            "ko": "풀 리퀘스트의 댓글 검색"
          },
          "required_params": ["project_key", "repo_slug", "pull_request_id"],
          "optional_params": ["limit", "start"],
          "endpoint": "/rest/api/1.0/projects/{project_key}/repos/{repo_slug}/pull-requests/{pull_request_id}/comments",
          "example": "get_pull_request_comments(project_key='TEST', repo_slug='my-repo', pull_request_id=1, limit=100)"
        },
        {
          "operation": "add_pull_request_comment",
          "description": {
            "en": "Adds a comment to a pull request",
            "ko": "풀 리퀘스트에 댓글 추가"
          },
          "required_params": ["project_key", "repo_slug", "pull_request_id", "text"],
          "optional_params": ["parent_id"],
          "endpoint": "/rest/api/1.0/projects/{project_key}/repos/{repo_slug}/pull-requests/{pull_request_id}/comments",
          "example": "add_pull_request_comment(project_key='TEST', repo_slug='my-repo', pull_request_id=1, text='LGTM!')"
        },
        {
          "operation": "approve_pull_request",
          "description": {
            "en": "Approves a pull request",
            "ko": "풀 리퀘스트 승인"
          },
          "required_params": ["project_key", "repo_slug", "pull_request_id"],
          "optional_params": [],
          "endpoint": "/rest/api/1.0/projects/{project_key}/repos/{repo_slug}/pull-requests/{pull_request_id}/approve",
          "example": "approve_pull_request(project_key='TEST', repo_slug='my-repo', pull_request_id=1)"
        },
        {
          "operation": "merge_pull_request",
          "description": {
            "en": "Merges a pull request",
            "ko": "풀 리퀘스트 병합"
          },
          "required_params": ["project_key", "repo_slug", "pull_request_id"],
          "optional_params": ["version", "message"],
          "endpoint": "/rest/api/1.0/projects/{project_key}/repos/{repo_slug}/pull-requests/{pull_request_id}/merge",
          "example": "merge_pull_request(project_key='TEST', repo_slug='my-repo', pull_request_id=1, version=2, message='Merged PR #1')"
        },
        {
          "operation": "decline_pull_request",
          "description": {
            "en": "Declines a pull request",
            "ko": "풀 리퀘스트 거절"
          },
          "required_params": ["project_key", "repo_slug", "pull_request_id"],
          "optional_params": ["version", "message"],
          "endpoint": "/rest/api/1.0/projects/{project_key}/repos/{repo_slug}/pull-requests/{pull_request_id}/decline",
          "example": "decline_pull_request(project_key='TEST', repo_slug='my-repo', pull_request_id=1, version=2, message='Need more work')"
        }
      ],
      "commit_operations": [
        {
          "operation": "get_commits",
          "description": {
            "en": "Retrieves commits from the specified repository",
            "ko": "지정된 저장소에서 커밋 검색"
          },
          "required_params": ["project_key", "repo_slug"],
          "optional_params": ["limit", "start", "path", "since", "until"],
          "endpoint": "/rest/api/1.0/projects/{project_key}/repos/{repo_slug}/commits",
          "example": "get_commits(project_key='TEST', repo_slug='my-repo', limit=100, path='src/main')"
        },
        {
          "operation": "get_commit",
          "description": {
            "en": "Retrieves a commit with the given ID from the specified repository",
            "ko": "지정된 저장소에서 주어진 ID를 가진 커밋 검색"
          },
          "required_params": ["project_key", "repo_slug", "commit_id"],
          "optional_params": [],
          "endpoint": "/rest/api/1.0/projects/{project_key}/repos/{repo_slug}/commits/{commit_id}",
          "example": "get_commit(project_key='TEST', repo_slug='my-repo', commit_id='abcdef1234567890')"
        },
        {
          "operation": "get_commit_changes",
          "description": {
            "en": "Retrieves changes for a commit",
            "ko": "커밋의 변경 사항 검색"
          },
          "required_params": ["project_key", "repo_slug", "commit_id"],
          "optional_params": ["limit", "start"],
          "endpoint": "/rest/api/1.0/projects/{project_key}/repos/{repo_slug}/commits/{commit_id}/changes",
          "example": "get_commit_changes(project_key='TEST', repo_slug='my-repo', commit_id='abcdef1234567890', limit=100)"
        },
        {
          "operation": "get_commit_comments",
          "description": {
            "en": "Retrieves comments for a commit",
            "ko": "커밋의 댓글 검색"
          },
          "required_params": ["project_key", "repo_slug", "commit_id"],
          "optional_params": ["limit", "start"],
          "endpoint": "/rest/api/1.0/projects/{project_key}/repos/{repo_slug}/commits/{commit_id}/comments",
          "example": "get_commit_comments(project_key='TEST', repo_slug='my-repo', commit_id='abcdef1234567890', limit=100)"
        },
        {
          "operation": "add_commit_comment",
          "description": {
            "en": "Adds a comment to a commit",
            "ko": "커밋에 댓글 추가"
          },
          "required_params": ["project_key", "repo_slug", "commit_id", "text"],
          "optional_params": ["path", "line", "line_type"],
          "endpoint": "/rest/api/1.0/projects/{project_key}/repos/{repo_slug}/commits/{commit_id}/comments",
          "example": "add_commit_comment(project_key='TEST', repo_slug='my-repo', commit_id='abcdef1234567890', text='Looks good!', path='src/main/java/Main.java', line=42, line_type='ADDED')"
        }
      ],
      "file_operations": [
        {
          "operation": "get_files",
          "description": {
            "en": "Retrieves a list of files in the specified path of a repository",
            "ko": "저장소의 지정된 경로에 있는 파일 목록 검색"
          },
          "required_params": ["project_key", "repo_slug"],
          "optional_params": ["path", "at"],
          "endpoint": "/rest/api/1.0/projects/{project_key}/repos/{repo_slug}/files",
          "example": "get_files(project_key='TEST', repo_slug='my-repo', path='src/main', at='master')"
        },
        {
          "operation": "get_file_content",
          "description": {
            "en": "Retrieves the content of a file in a repository",
            "ko": "저장소의 파일 내용 검색"
          },
          "required_params": ["project_key", "repo_slug", "path"],
          "optional_params": ["at"],
          "endpoint": "/rest/api/1.0/projects/{project_key}/repos/{repo_slug}/browse/{path}",
          "example": "get_file_content(project_key='TEST', repo_slug='my-repo', path='README.md', at='master')"
        },
        {
          "operation": "get_raw_file_content",
          "description": {
            "en": "Retrieves the raw content of a file in a repository",
            "ko": "저장소의 파일 원시 내용 검색"
          },
          "required_params": ["project_key", "repo_slug", "path"],
          "optional_params": ["at"],
          "endpoint": "/rest/api/1.0/projects/{project_key}/repos/{repo_slug}/raw/{path}",
          "example": "get_raw_file_content(project_key='TEST', repo_slug='my-repo', path='src/main/java/Main.java', at='master')"
        }
      ],
      "hook_operations": [
        {
          "operation": "get_hooks",
          "description": {
            "en": "Retrieves all hooks for a repository",
            "ko": "저장소의 모든 후크 검색"
          },
          "required_params": ["project_key", "repo_slug"],
          "optional_params": ["type"],
          "endpoint": "/rest/api/1.0/projects/{project_key}/repos/{repo_slug}/settings/hooks",
          "example": "get_hooks(project_key='TEST', repo_slug='my-repo', type='PRE_RECEIVE')"
        },
        {
          "operation": "get_hook",
          "description": {
            "en": "Retrieves a hook for a repository",
            "ko": "저장소의 후크 검색"
          },
          "required_params": ["project_key", "repo_slug", "hook_key"],
          "optional_params": [],
          "endpoint": "/rest/api/1.0/projects/{project_key}/repos/{repo_slug}/settings/hooks/{hook_key}",
          "example": "get_hook(project_key='TEST', repo_slug='my-repo', hook_key='com.atlassian.stash.stash-bundled-hooks:prevent-non-fast-forward-hook')"
        },
        {
          "operation": "enable_hook",
          "description": {
            "en": "Enables a hook for a repository",
            "ko": "저장소의 후크 활성화"
          },
          "required_params": ["project_key", "repo_slug", "hook_key"],
          "optional_params": ["settings"],
          "endpoint": "/rest/api/1.0/projects/{project_key}/repos/{repo_slug}/settings/hooks/{hook_key}/enabled",
          "example": "enable_hook(project_key='TEST', repo_slug='my-repo', hook_key='com.atlassian.stash.stash-bundled-hooks:prevent-non-fast-forward-hook', settings={'requireAllApprovers': True})"
        },
        {
          "operation": "disable_hook",
          "description": {
            "en": "Disables a hook for a repository",
            "ko": "저장소의 후크 비활성화"
          },
          "required_params": ["project_key", "repo_slug", "hook_key"],
          "optional_params": [],
          "endpoint": "/rest/api/1.0/projects/{project_key}/repos/{repo_slug}/settings/hooks/{hook_key}/enabled",
          "example": "disable_hook(project_key='TEST', repo_slug='my-repo', hook_key='com.atlassian.stash.stash-bundled-hooks:prevent-non-fast-forward-hook')"
        }
      ],
      "tag_operations": [
        {
          "operation": "get_tags",
          "description": {
            "en": "Retrieves tags from the specified repository",
            "ko": "지정된 저장소에서 태그 검색"
          },
          "required_params": ["project_key", "repo_slug"],
          "optional_params": ["limit", "start", "filterText", "orderBy"],
          "endpoint": "/rest/api/1.0/projects/{project_key}/repos/{repo_slug}/tags",
          "example": "get_tags(project_key='TEST', repo_slug='my-repo', limit=100, filterText='v1.')"
        },
        {
          "operation": "create_tag",
          "description": {
            "en": "Creates a new tag in the specified repository",
            "ko": "지정된 저장소에 새 태그 생성"
          },
          "required_params": ["project_key", "repo_slug", "name", "startPoint"],
          "optional_params": ["message"],
          "endpoint": "/rest/api/1.0/projects/{project_key}/repos/{repo_slug}/tags",
          "example": "create_tag(project_key='TEST', repo_slug='my-repo', name='v1.0.0', startPoint='master', message='Release 1.0.0')"
        }
      ]
    },
    "common_errors": [
      {
        "error_code": 401,
        "description": {
          "en": "Unauthorized: Authentication credentials are missing or invalid",
          "ko": "인증되지 않음: 인증 자격 증명이 없거나 유효하지 않습니다"
        },
        "resolution": {
          "en": "Check your username and password/token or refresh your credentials",
          "ko": "사용자 이름 및 비밀번호/토큰을 확인하거나 자격 증명을 새로 고치세요"
        }
      },
      {
        "error_code": 403,
        "description": {
          "en": "Forbidden: The authenticated user does not have the required permissions",
          "ko": "금지됨: 인증된 사용자에게 필요한 권한이 없습니다"
        },
        "resolution": {
          "en": "Contact the repository administrator to request the necessary permissions",
          "ko": "필요한 권한을 요청하려면 저장소 관리자에게 문의하세요"
        }
      },
      {
        "error_code": 404,
        "description": {
          "en": "Not Found: The specified resource does not exist",
          "ko": "찾을 수 없음: 지정된 리소스가 존재하지 않습니다"
        },
        "resolution": {
          "en": "Check the project key, repository slug, or other identifiers",
          "ko": "프로젝트 키, 저장소 슬러그 또는 기타 식별자를 확인하세요"
        }
      },
      {
        "error_code": 409,
        "description": {
          "en": "Conflict: The request cannot be processed due to a conflict",
          "ko": "충돌: 충돌로 인해 요청을 처리할 수 없습니다"
        },
        "resolution": {
          "en": "The resource might already exist or has been modified by another user",
          "ko": "리소스가 이미 존재하거나 다른 사용자에 의해 수정되었을 수 있습니다"
        }
      },
      {
        "error_code": 429,
        "description": {
          "en": "Too Many Requests: Rate limit exceeded",
          "ko": "너무 많은 요청: 속도 제한 초과"
        },
        "resolution": {
          "en": "Reduce the frequency of requests or wait before making more requests",
          "ko": "요청 빈도를 줄이거나 더 많은 요청을 하기 전에 기다리세요"
        }
      }
    ],
    "best_practices": [
      {
        "category": "authentication",
        "title": {
          "en": "Use personal access tokens instead of passwords",
          "ko": "비밀번호 대신 개인 액세스 토큰 사용"
        },
        "description": {
          "en": "Personal access tokens are more secure and can have limited scopes and expiration dates",
          "ko": "개인 액세스 토큰은 더 안전하며 제한된 범위와 만료 날짜를 가질 수 있습니다"
        }
      },
      {
        "category": "authentication",
        "title": {
          "en": "Use OAuth for third-party applications",
          "ko": "타사 애플리케이션에 OAuth 사용"
        },
        "description": {
          "en": "OAuth provides a secure way for users to grant third-party applications limited access to their repositories",
          "ko": "OAuth는 사용자가 타사 애플리케이션에 저장소에 대한 제한된 액세스 권한을 부여할 수 있는 안전한 방법을 제공합니다"
        }
      },
      {
        "category": "performance",
        "title": {
          "en": "Use appropriate pagination settings",
          "ko": "적절한 페이지네이션 설정 사용"
        },
        "description": {
          "en": "When retrieving large result sets, use pagination to improve performance and avoid hitting API rate limits",
          "ko": "대규모 결과 집합을 검색할 때 페이지네이션을 사용하여 성능을 향상시키고 API 속도 제한에 도달하지 않도록 합니다"
        }
      },
      {
        "category": "performance",
        "title": {
          "en": "Minimize API calls",
          "ko": "API 호출 최소화"
        },
        "description": {
          "en": "Batch operations when possible and cache results to reduce the number of API calls",
          "ko": "가능한 경우 작업을 일괄 처리하고 결과를 캐시하여 API 호출 수를 줄입니다"
        }
      },
      {
        "category": "workflow",
        "title": {
          "en": "Use branches for feature development",
          "ko": "기능 개발에 브랜치 사용"
        },
        "description": {
          "en": "Create branches for new features and bug fixes to isolate changes and facilitate code reviews",
          "ko": "새로운 기능 및 버그 수정을 위한 브랜치를 생성하여 변경 사항을 격리하고 코드 리뷰를 용이하게 합니다"
        }
      },
      {
        "category": "workflow",
        "title": {
          "en": "Follow the branch naming convention",
          "ko": "브랜치 명명 규칙 준수"
        },
        "description": {
          "en": "Use a consistent naming convention for branches, such as feature/, bugfix/, or hotfix/ prefixes",
          "ko": "feature/, bugfix/ 또는 hotfix/ 접두사와 같은 일관된 브랜치 명명 규칙을 사용합니다"
        }
      },
      {
        "category": "workflow",
        "title": {
          "en": "Use pull requests for code reviews",
          "ko": "코드 리뷰에 풀 리퀘스트 사용"
        },
        "description": {
          "en": "Create pull requests for changes to facilitate code reviews and maintain code quality",
          "ko": "코드 리뷰를 용이하게 하고 코드 품질을 유지하기 위해 변경 사항에 대한 풀 리퀘스트를 생성합니다"
        }
      },
      {
        "category": "workflow",
        "title": {
          "en": "Set up branch permissions",
          "ko": "브랜치 권한 설정"
        },
        "description": {
          "en": "Protect important branches by requiring pull requests and approvals before merging",
          "ko": "병합하기 전에 풀 리퀘스트 및 승인을 요구하여 중요한 브랜치를 보호합니다"
        }
      }
    ],
    "user_examples": [
      {
        "user_query": {
          "en": "List all repositories in the TEST project",
          "ko": "TEST 프로젝트의 모든 저장소 나열"
        },
        "agent_response": {
          "en": "Here are all repositories in the TEST project:\n\n1. my-repo (Git)\n   - Description: This is a test repository\n   - Last updated: 2023-04-15\n2. utils (Git)\n   - Description: Common utilities\n   - Last updated: 2023-03-20\n3. documentation (Git)\n   - Description: Project documentation\n   - Last updated: 2023-04-10",
          "ko": "TEST 프로젝트의 모든 저장소는 다음과 같습니다:\n\n1. my-repo (Git)\n   - 설명: 이것은 테스트 저장소입니다\n   - 마지막 업데이트: 2023-04-15\n2. utils (Git)\n   - 설명: 공통 유틸리티\n   - 마지막 업데이트: 2023-03-20\n3. documentation (Git)\n   - 설명: 프로젝트 문서\n   - 마지막 업데이트: 2023-04-10"
        },
        "bitbucket_operation": "get_repositories(project_key='TEST', limit=100)",
        "notes": {
          "en": "Basic operation to list all repositories in a project. Requires project view permission.",
          "ko": "프로젝트의 모든 저장소를 나열하는 기본 작업. 프로젝트 보기 권한이 필요합니다."
        }
      },
      {
        "user_query": {
          "en": "Create a new repository called 'payment-gateway' in the FINANCE project",
          "ko": "FINANCE 프로젝트에 'payment-gateway'라는 새 저장소 생성"
        },
        "agent_response": {
          "en": "I'll create a new repository named 'payment-gateway' in the FINANCE project.\n\nRepository created successfully! You can now clone it using:\ngit clone https://bitbucket.org/company/finance/payment-gateway.git",
          "ko": "FINANCE 프로젝트에 'payment-gateway'라는 새 저장소를 생성하겠습니다.\n\n저장소가 성공적으로 생성되었습니다! 이제 다음을 사용하여 복제할 수 있습니다:\ngit clone https://bitbucket.org/company/finance/payment-gateway.git"
        },
        "bitbucket_operation": "create_repository(project_key='FINANCE', name='payment-gateway', scmId='git')",
        "notes": {
          "en": "Creates a new Git repository in the specified project. Requires project write permission.",
          "ko": "지정된 프로젝트에 새 Git 저장소를 생성합니다. 프로젝트 쓰기 권한이 필요합니다."
        }
      },
      {
        "user_query": {
          "en": "Show open pull requests for the 'mobile-app' repository in the MOBILE project",
          "ko": "MOBILE 프로젝트의 'mobile-app' 저장소의 열린 풀 리퀘스트 표시"
        },
        "agent_response": {
          "en": "Here are the open pull requests for the mobile-app repository in the MOBILE project:\n\n1. PR #25: \"Add push notification support\" by John Smith\n   - Created: 2023-04-12\n   - From: feature/push-notifications -> master\n   - Reviewers: Alice Johnson (approved), Bob Williams (pending)\n\n2. PR #28: \"Fix login screen crash\" by Sarah Davis\n   - Created: 2023-04-14\n   - From: bugfix/login-crash -> master\n   - Reviewers: John Smith (approved), Alice Johnson (pending)",
          "ko": "MOBILE 프로젝트의 mobile-app 저장소에 대한 열린 풀 리퀘스트는 다음과 같습니다:\n\n1. PR #25: \"푸시 알림 지원 추가\" by John Smith\n   - 생성: 2023-04-12\n   - From: feature/push-notifications -> master\n   - 리뷰어: Alice Johnson (승인됨), Bob Williams (보류 중)\n\n2. PR #28: \"로그인 화면 충돌 수정\" by Sarah Davis\n   - 생성: 2023-04-14\n   - From: bugfix/login-crash -> master\n   - 리뷰어: John Smith (승인됨), Alice Johnson (보류 중)"
        },
        "bitbucket_operation": "get_pull_requests(project_key='MOBILE', repo_slug='mobile-app', state='OPEN', limit=100)",
        "notes": {
          "en": "Retrieves open pull requests for a repository. Requires repository read permission.",
          "ko": "저장소에 대한 열린 풀 리퀘스트를 검색합니다. 저장소 읽기 권한이 필요합니다."
        }
      },
      {
        "user_query": {
          "en": "Create a new branch called 'feature/user-profiles' in the 'web-client' repository under WEB project",
          "ko": "WEB 프로젝트의 'web-client' 저장소에 'feature/user-profiles'라는 새 브랜치 생성"
        },
        "agent_response": {
          "en": "I'll create a new branch named 'feature/user-profiles' in the web-client repository under the WEB project.\n\nBranch created successfully! The branch 'feature/user-profiles' was created from the 'master' branch. You can now check it out using:\ngit checkout feature/user-profiles",
          "ko": "WEB 프로젝트의 web-client 저장소에 'feature/user-profiles'라는 새 브랜치를 생성하겠습니다.\n\n브랜치가 성공적으로 생성되었습니다! 'feature/user-profiles' 브랜치가 'master' 브랜치에서 생성되었습니다. 이제 다음을 사용하여 체크아웃할 수 있습니다:\ngit checkout feature/user-profiles"
        },
        "bitbucket_operation": "create_branch(project_key='WEB', repo_slug='web-client', name='feature/user-profiles', startPoint='master')",
        "notes": {
          "en": "Creates a new branch from a specified starting point. Requires repository write permission.",
          "ko": "지정된 시작점에서 새 브랜치를 생성합니다. 저장소 쓰기 권한이 필요합니다."
        }
      },
      {
        "user_query": {
          "en": "Create a pull request to merge my 'feature/payment-processing' branch into the 'develop' branch in the 'payment-service' repository",
          "ko": "'payment-service' 저장소에서 'feature/payment-processing' 브랜치를 'develop' 브랜치로 병합하는 풀 리퀘스트 생성"
        },
        "agent_response": {
          "en": "I'll create a pull request to merge your 'feature/payment-processing' branch into the 'develop' branch in the payment-service repository.\n\nPull request created successfully!\n\nPR #15: \"Merge feature/payment-processing into develop\"\nDescription: This PR adds the payment processing functionality including credit card and PayPal integrations.\n\nReviewers have been automatically added based on repository settings. You can view the PR here: https://bitbucket.org/company/payment-service/pull-requests/15",
          "ko": "payment-service 저장소에서 'feature/payment-processing' 브랜치를 'develop' 브랜치로 병합하는 풀 리퀘스트를 생성하겠습니다.\n\n풀 리퀘스트가 성공적으로 생성되었습니다!\n\nPR #15: \"feature/payment-processing을 develop으로 병합\"\n설명: 이 PR은 신용 카드 및 PayPal 통합을 포함한 결제 처리 기능을 추가합니다.\n\n저장소 설정에 따라 리뷰어가 자동으로 추가되었습니다. 다음에서 PR을 볼 수 있습니다: https://bitbucket.org/company/payment-service/pull-requests/15"
        },
        "bitbucket_operation": "create_pull_request(project_key='PAYMENT', repo_slug='payment-service', title='Merge feature/payment-processing into develop', fromRef='refs/heads/feature/payment-processing', toRef='refs/heads/develop', description='This PR adds the payment processing functionality including credit card and PayPal integrations.')",
        "notes": {
          "en": "Creates a pull request to merge one branch into another. Requires repository write permission.",
          "ko": "하나의 브랜치를 다른 브랜치로 병합하는 풀 리퀘스트를 생성합니다. 저장소 쓰기 권한이 필요합니다."
        }
      },
      {
        "user_query": {
          "en": "Show me the recent commits in the 'api' repository",
          "ko": "'api' 저장소의 최근 커밋 표시"
        },
        "agent_response": {
          "en": "Here are the recent commits in the api repository:\n\n1. Commit abcdef1: \"Fix rate limiting issue\" by Emily Chen (2023-04-15 14:23)\n   - 3 files changed, 47 additions, 12 deletions\n\n2. Commit bcdefa2: \"Add pagination to user endpoints\" by David Wilson (2023-04-14 16:45)\n   - 5 files changed, 124 additions, 37 deletions\n\n3. Commit cdefab3: \"Update authentication middleware\" by John Smith (2023-04-13 11:12)\n   - 2 files changed, 31 additions, 15 deletions\n\n4. Commit defabc4: \"Add documentation for new endpoints\" by Sarah Davis (2023-04-12 09:55)\n   - 7 files changed, 235 additions, 0 deletions\n\n5. Commit efabcd5: \"Fix security vulnerability in auth endpoint\" by Michael Brown (2023-04-10 17:30)\n   - 1 file changed, 8 additions, 3 deletions",
          "ko": "api 저장소의 최근 커밋은 다음과 같습니다:\n\n1. 커밋 abcdef1: \"속도 제한 문제 수정\" by Emily Chen (2023-04-15 14:23)\n   - 3개 파일 변경, 47개 추가, 12개 삭제\n\n2. 커밋 bcdefa2: \"사용자 엔드포인트에 페이지네이션 추가\" by David Wilson (2023-04-14 16:45)\n   - 5개 파일 변경, 124개 추가, 37개 삭제\n\n3. 커밋 cdefab3: \"인증 미들웨어 업데이트\" by John Smith (2023-04-13 11:12)\n   - 2개 파일 변경, 31개 추가, 15개 삭제\n\n4. 커밋 defabc4: \"새 엔드포인트에 대한 문서 추가\" by Sarah Davis (2023-04-12 09:55)\n   - 7개 파일 변경, 235개 추가, 0개 삭제\n\n5. 커밋 efabcd5: \"인증 엔드포인트의 보안 취약점 수정\" by Michael Brown (2023-04-10 17:30)\n   - 1개 파일 변경, 8개 추가, 3개 삭제"
        },
        "bitbucket_operation": "get_commits(project_key='BACKEND', repo_slug='api', limit=5)",
        "notes": {
          "en": "Retrieves recent commits for a repository. Requires repository read permission.",
          "ko": "저장소에 대한 최근 커밋을 검색합니다. 저장소 읽기 권한이 필요합니다."
        }
      },
      {
        "user_query": {
          "en": "Show me the README.md file from the 'documentation' repository",
          "ko": "'documentation' 저장소의 README.md 파일 표시"
        },
        "agent_response": {
          "en": "Here's the content of the README.md file from the documentation repository:\n\n# Company Documentation\n\nThis repository contains the official documentation for all company projects.\n\n## Getting Started\n\nTo build the documentation locally:\n\n1. Install dependencies: `npm install`\n2. Start the development server: `npm start`\n3. Visit http://localhost:8000 to view the documentation\n\n## Contributing\n\nPlease see [CONTRIBUTING.md](CONTRIBUTING.md) for guidelines on how to contribute to this documentation.\n\n## License\n\nThis documentation is copyright © Company Name 2023.",
          "ko": "documentation 저장소의 README.md 파일 내용은 다음과 같습니다:\n\n# 회사 문서\n\n이 저장소에는 모든 회사 프로젝트에 대한 공식 문서가 포함되어 있습니다.\n\n## 시작하기\n\n로컬에서 문서를 빌드하려면:\n\n1. 종속성 설치: `npm install`\n2. 개발 서버 시작: `npm start`\n3. http://localhost:8000을 방문하여 문서 보기\n\n## 기여하기\n\n이 문서에 기여하는 방법에 대한 지침은 [CONTRIBUTING.md](CONTRIBUTING.md)를 참조하세요.\n\n## 라이선스\n\n이 문서는 © Company Name 2023의 저작권입니다."
        },
        "bitbucket_operation": "get_file_content(project_key='DOCS', repo_slug='documentation', path='README.md')",
        "notes": {
          "en": "Retrieves the content of a specific file in a repository. Requires repository read permission.",
          "ko": "저장소의 특정 파일 내용을 검색합니다. 저장소 읽기 권한이 필요합니다."
        }
      },
      {
        "user_query": {
          "en": "Compare the 'develop' and 'feature/user-auth' branches in the 'auth-service' repository",
          "ko": "'auth-service' 저장소의 'develop'과 'feature/user-auth' 브랜치 비교"
        },
        "agent_response": {
          "en": "I'll compare the develop and feature/user-auth branches in the auth-service repository.\n\nComparison between develop and feature/user-auth:\n\nThe feature/user-auth branch is 7 commits ahead and 2 commits behind develop.\n\nFiles changed:\n1. src/auth/UserController.java (Modified)\n   - Added new OAuth2 authentication methods\n   - Updated user registration flow\n\n2. src/auth/AuthConfig.java (Modified)\n   - Added configuration for new authentication providers\n\n3. src/auth/services/OAuthService.java (New)\n   - New service for handling OAuth authentication\n\n4. test/auth/OAuthServiceTest.java (New)\n   - Tests for the new OAuth service\n\n5. docs/authentication.md (Modified)\n   - Updated documentation for the new authentication options",
          "ko": "auth-service 저장소의 develop과 feature/user-auth 브랜치를 비교하겠습니다.\n\ndevelop과 feature/user-auth 간의 비교:\n\nfeature/user-auth 브랜치는 develop보다 7개 커밋 앞서 있고 2개 커밋 뒤쳐져 있습니다.\n\n변경된 파일:\n1. src/auth/UserController.java (수정됨)\n   - 새로운 OAuth2 인증 메서드 추가\n   - 사용자 등록 흐름 업데이트\n\n2. src/auth/AuthConfig.java (수정됨)\n   - 새로운 인증 제공자에 대한 구성 추가\n\n3. src/auth/services/OAuthService.java (새로 생성)\n   - OAuth 인증을 처리하기 위한 새로운 서비스\n\n4. test/auth/OAuthServiceTest.java (새로 생성)\n   - 새로운 OAuth 서비스에 대한 테스트\n\n5. docs/authentication.md (수정됨)\n   - 새로운 인증 옵션에 대한 문서 업데이트"
        },
        "bitbucket_operation": [
          "get_compare_commits(project_key='AUTH', repo_slug='auth-service', from='refs/heads/develop', to='refs/heads/feature/user-auth')",
          "get_compare_diff(project_key='AUTH', repo_slug='auth-service', from='refs/heads/develop', to='refs/heads/feature/user-auth')"
        ],
        "notes": {
          "en": "Compares two branches by retrieving the commits between them and the diff of changes. Requires repository read permission.",
          "ko": "두 브랜치 간의 커밋과 변경 사항의 차이를 검색하여 두 브랜치를 비교합니다. 저장소 읽기 권한이 필요합니다."
        }
      },
      {
        "user_query": {
          "en": "Approve pull request #42 in the 'backend-api' repository",
          "ko": "'backend-api' 저장소의 풀 리퀘스트 #42 승인"
        },
        "agent_response": {
          "en": "I'll approve pull request #42 in the backend-api repository.\n\nPull request #42 \"Add user profile endpoints\" has been approved successfully. You left the following message with your approval: \"Code looks good and tests are passing. Ready to merge.\"",
          "ko": "backend-api 저장소의 풀 리퀘스트 #42를 승인하겠습니다.\n\n풀 리퀘스트 #42 \"사용자 프로필 엔드포인트 추가\"가 성공적으로 승인되었습니다. 승인과 함께 다음 메시지를 남겼습니다: \"코드가 좋아 보이고 테스트가 통과되었습니다. 병합할 준비가 되었습니다.\""
        },
        "bitbucket_operation": "approve_pull_request(project_key='BACKEND', repo_slug='backend-api', pull_request_id=42)",
        "notes": {
          "en": "Approves a pull request. Requires repository read permission and ability to approve pull requests.",
          "ko": "풀 리퀘스트를 승인합니다. 저장소 읽기 권한과 풀 리퀘스트를 승인할 수 있는 능력이 필요합니다."
        }
      },
      {
        "user_query": {
          "en": "Merge pull request #27 in the 'frontend' repository",
          "ko": "'frontend' 저장소의 풀 리퀘스트 #27 병합"
        },
        "agent_response": {
          "en": "I'll merge pull request #27 in the frontend repository.\n\nPull request #27 \"Update React to version 18\" has been successfully merged into the master branch. The merge commit is ab12cd34.\n\nThe feature branch has been automatically deleted as per repository settings.",
          "ko": "frontend 저장소의 풀 리퀘스트 #27을 병합하겠습니다.\n\n풀 리퀘스트 #27 \"React를 버전 18로 업데이트\"가 master 브랜치로 성공적으로 병합되었습니다. 병합 커밋은 ab12cd34입니다.\n\n저장소 설정에 따라 기능 브랜치가 자동으로 삭제되었습니다."
        },
        "bitbucket_operation": "merge_pull_request(project_key='FRONTEND', repo_slug='frontend', pull_request_id=27, version=3, message='Merge pull request #27: Update React to version 18')",
        "notes": {
          "en": "Merges a pull request. Requires repository write permission and the pull request must be approved according to repository settings.",
          "ko": "풀 리퀘스트를 병합합니다. 저장소 쓰기 권한이 필요하고 저장소 설정에 따라 풀 리퀘스트가 승인되어야 합니다."
        }
      },
      {
        "user_query": {
          "en": "Create a tag 'v1.2.0' for the release commit in the 'product-service' repository",
          "ko": "'product-service' 저장소의 릴리스 커밋에 'v1.2.0' 태그 생성"
        },
        "agent_response": {
          "en": "I'll create a tag 'v1.2.0' for the release commit in the product-service repository.\n\nTag 'v1.2.0' was successfully created for commit 123abcd (master). The tag includes the message: \"Release version 1.2.0 with new product recommendation engine\".",
          "ko": "product-service 저장소의 릴리스 커밋에 'v1.2.0' 태그를 생성하겠습니다.\n\n태그 'v1.2.0'이 커밋 123abcd(master)에 대해 성공적으로 생성되었습니다. 태그에는 다음 메시지가 포함됩니다: \"새로운 제품 추천 엔진이 포함된 버전 1.2.0 릴리스\"."
        },
        "bitbucket_operation": "create_tag(project_key='PRODUCT', repo_slug='product-service', name='v1.2.0', startPoint='123abcd', message='Release version 1.2.0 with new product recommendation engine')",
        "notes": {
          "en": "Creates a new tag for a specific commit. Requires repository write permission.",
          "ko": "특정 커밋에 대한 새 태그를 생성합니다. 저장소 쓰기 권한이 필요합니다."
        }
      }
    ]
  }